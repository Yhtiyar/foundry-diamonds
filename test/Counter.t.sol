// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import "forge-std/Test.sol";
import "../src/facets/CounterFacet.sol";
import "../src/facets/DecrementFacet.sol";
import {Diamond} from "diamond/Diamond.sol";
import "diamond/facets/OwnershipFacet.sol";
import "diamond/facets/DiamondCutFacet.sol";
import "diamond/facets/DiamondLoupeFacet.sol";
import "diamond/interfaces/IDiamondCut.sol";

contract CounterTest is Test {
    Diamond public diamondContract;

    function deployDiamond() internal returns (Diamond) {
        DiamondCutFacet diamondCutFacet = new DiamondCutFacet();
        Diamond diamond = new Diamond(address(this), address(diamondCutFacet));
        return diamond;
    }

    function setUp() public {
        // auto-generated by utils/facet_cut_gen.py
        Diamond diamond = deployDiamond();
        IDiamondCut.FacetCut[] memory cut = new IDiamondCut.FacetCut[](2);

        CounterFacet counterFacet = new CounterFacet();
        bytes4[] memory counterFacetfunctionSelectors = new bytes4[](3);
        counterFacetfunctionSelectors[0] = CounterFacet.getNumber.selector;
        counterFacetfunctionSelectors[1] = CounterFacet.increment.selector;
        counterFacetfunctionSelectors[2] = CounterFacet.setNumber.selector;
        cut[0] = IDiamondCut.FacetCut({
            facetAddress: address(counterFacet),
            action: IDiamondCut.FacetCutAction.Add,
            functionSelectors: counterFacetfunctionSelectors
        });

        DecrementFacet decrementFacet = new DecrementFacet();
        bytes4[] memory decrementFacetfunctionSelectors = new bytes4[](1);
        decrementFacetfunctionSelectors[0] = DecrementFacet.decrement.selector;
        cut[1] = IDiamondCut.FacetCut({
            facetAddress: address(decrementFacet),
            action: IDiamondCut.FacetCutAction.Add,
            functionSelectors: decrementFacetfunctionSelectors
        });

        DiamondCutFacet(address(diamond)).diamondCut(
            cut, //array of of cuts
            address(0), //initializer address
            "" //initializer data
        );
        diamondContract = diamond;
        CounterFacet(address(diamondContract)).setNumber(0);
    }

    function testIncrement() public {
        CounterFacet counter = CounterFacet(address(diamondContract));
        uint256 before = counter.getNumber();
        counter.increment();
        assertEq(counter.getNumber(), before + 1);
    }

    function testDecrement() public {
        CounterFacet counter = CounterFacet(address(diamondContract));
        uint256 before = counter.getNumber();
        if (before == 0) return;
        DecrementFacet(address(diamondContract)).decrement();
        assertEq(counter.getNumber(), before - 1);
    }

    function testSetNumber(uint256 x) public {
        CounterFacet counter = CounterFacet(address(diamondContract));
        counter.setNumber(x);
        assertEq(counter.getNumber(), x);
    }
}
