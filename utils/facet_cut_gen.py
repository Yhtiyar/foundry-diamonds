import argparse
import json
import os
from typing import Dict, List

OUT_DIR = "out"
DIAMOND_CUT_INTERFACE = "IDiamondCut"
FACET_CUT_STRUCT = "FacetCut"
DIAMOND_CUT_FACET = "DiamondCutFacet"
DIAMOND_CUT_FUNCTION = "diamondCut"
DIAMOND_CUT_VAR_NAME = "cut"


def generate_facet_cut(
    index: int, facet_name: str, functions_to_cut: List[Dict[str, any]]
):
    generated = []
    contract_var_name = facet_name[0].lower() + facet_name[1:]
    function_selectors_var_name = f"{contract_var_name}functionSelectors"

    generated.append(f"{facet_name} {contract_var_name} = new {facet_name}();")
    generated.append(
        f"bytes4[] memory {function_selectors_var_name} = new bytes4[]({len(functions_to_cut)});"
    )

    for i in range(len(functions_to_cut)):
        generated.append(
            f"{function_selectors_var_name}[{i}] = {facet_name}.{functions_to_cut[i]['name']}.selector;"
        )

    generated.append(
        f"""{DIAMOND_CUT_VAR_NAME}[{index}] = {DIAMOND_CUT_INTERFACE}.{FACET_CUT_STRUCT}({{
                facetAddress: address({contract_var_name}),
                action: {DIAMOND_CUT_INTERFACE}.FacetCutAction.Add,
                functionSelectors: {function_selectors_var_name}
        }});"""
    )
    return "\t" + "\n\t".join(generated)


def generate_diamond_cut(facet_names: List[str], project_dir: str):
    generated = "\t" + "\n\t".join(
        [
            "// auto-generated by utils/facet_cut_gen.py",
            "Diamond diamond = Diamond(DIAMOND_ADDRESS);",
            f"{DIAMOND_CUT_INTERFACE}.{FACET_CUT_STRUCT}[] memory cut = new {DIAMOND_CUT_INTERFACE}.{FACET_CUT_STRUCT}[]({len(facet_names)});",
            "\n",
        ]
    )
    for i in range(len(facet_names)):
        facet_functions = load_facet_functions(facet_names[i], project_dir)
        generated += generate_facet_cut(i, facet_names[i], facet_functions) + "\n\n"

    generated += """
        DiamondCutFacet(address(diamond)).diamondCut(
            cut,        //array of of cuts
            address(0), //initializer address
            ""          //initializer data
        );
            """

    return generated


def load_facet_functions(facet_name: str, project_dir: str):
    facet_file = os.path.join(
        project_dir, OUT_DIR, f"{facet_name}.sol", f"{facet_name}.json"
    )
    if not os.path.isfile(facet_file):
        raise ValueError(
            f"Contract build file {facet_file} doesn't exist, maybe you forget to run `forge build`?"
        )
    with open(facet_file) as ifp:
        build_data = json.load(ifp)
        facet_abi = build_data["abi"]

    return [el for el in facet_abi if el["type"] == "function"]


def handle_generate(args: argparse.Namespace):
    print(generate_diamond_cut(args.facets, args.p))


def main():
    parser = argparse.ArgumentParser(
        description="facet-cut-gen: Generate the solidity code for facet cuts"
    )
    parser.add_argument(
        "-f", "--facets", type=str, nargs="+", help="Facets name seperated by space"
    )
    parser.add_argument(
        "-p", type=str, default=os.getcwd(), help="Project directory. Deafuld=cwd"
    )
    parser.set_defaults(func=handle_generate)
    args = parser.parse_args()
    args.func(args)


if __name__ == "__main__":
    main()
